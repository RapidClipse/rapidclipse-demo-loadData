
package com.xdev.rcdemo.loadData.ui.generators;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import com.vaadin.event.LayoutEvents.LayoutClickEvent;
import com.vaadin.event.LayoutEvents.LayoutClickListener;
import com.vaadin.server.StreamResource;
import com.vaadin.server.StreamResource.StreamSource;
import com.vaadin.shared.ui.MarginInfo;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.xdev.rcdemo.loadData.entities.Category;
import com.xdev.ui.XdevHorizontalLayout;
import com.xdev.ui.XdevImage;
import com.xdev.ui.entitycomponent.table.XdevTable;

public class CategoryPictureColumn extends XdevHorizontalLayout {

	public static class Generator implements ColumnGenerator {
		@Override
		public Object generateCell(final Table table, final Object itemId, final Object columnId) {

			return new CategoryPictureColumn(table, itemId, columnId);
		}
	}

	private final Table customizedTable;
	private final Object itemId;
	private final Object columnId;

	private CategoryPictureColumn(final Table customizedTable, final Object itemId, final Object columnId) {
		super();

		this.customizedTable = customizedTable;
		this.itemId = itemId;
		this.columnId = columnId;

		this.initUI();

		/*
		 * In a database, files like images or pdfs mostly are saved as a bunch of bytes.
		 * The java datatype is in most situations a bytearray ("byte[]").
		 *
		 * To display a image or send a pdf to the user a "Source" is necessary.
		 * Therefore, a conversion is necessary:
		 * byte[] -> stream -> Source
		 *
		 */




		/*
		 * 1. Get the picture from the "category" bean of this table row
		 */

		final byte[] picture = getBean().getPicture();


		/*
		 * 2. Change it to a stream
		 *
		 * There are a lot of streams, but as we want to read something from this stream we need a InputStream.
		 * And as we have a byte[] as source we use a ByteArrayInputStream.
		 *
		 * @see     java.io.InputStream
		 * @see     java.io.OutputStream
		 */

		final ByteArrayInputStream myByteArrayInputStream = new ByteArrayInputStream(picture);

		/*
		 * 3. Build a Reource from the stream
		 *
		 */

		// First, define a StreamSource. It just defines what to do if someone wants the content with "getStream".
		final StreamSource myStreamSource = new StreamResource.StreamSource() {
			@Override
			public InputStream getStream() {
				return myByteArrayInputStream;
			}
		};


		// Second, wrap this source in a Resource. A Resource has additional infos like the filename - if we set them.
		// As here there is no filename available, we build a name by concatenating a default string ("defaultFilename") with the bean-id

		final StreamResource streamResource = new StreamResource(myStreamSource, "filenameIfAvailable" + getBean().getCategoryid());

		/*
		 * 4. Set this Resource as Source of the image component
		 */

		this.image.setSource(streamResource);


		/*
		 *  Set width of the image to "undefined" to avoid distortion
		 */
		this.image.setWidthUndefined();
	}

	public Table getTable() {
		return this.customizedTable;
	}

	public Object getItemId() {
		return this.itemId;
	}

	public Object getColumnId() {
		return this.columnId;
	}

	@SuppressWarnings("unchecked")
	public Category getBean() {
		return ((XdevTable<Category>) getTable()).getBeanItem(getItemId()).getBean();
	}

	/**
	 * Event handler delegate method for the {@link XdevHorizontalLayout}.
	 *
	 * @see LayoutClickListener#layoutClick(LayoutClickEvent)
	 * @eventHandlerDelegate
	 */
	private void this_layoutClick(final LayoutClickEvent event) {
		selectItem();
	}

	private void selectItem() {
		getTable().select(getItemId());
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.image = new XdevImage();

		this.setSpacing(false);
		this.setMargin(new MarginInfo(false));

		this.image.setWidth(100, Unit.PIXELS);
		this.image.setHeight(100, Unit.PIXELS);
		this.addComponent(this.image);
		this.setComponentAlignment(this.image, Alignment.MIDDLE_CENTER);
		this.setSizeUndefined();

		this.addLayoutClickListener(event -> this.this_layoutClick(event));
	} // </generated-code>

	// <generated-code name="variables">
	private XdevImage image;
	// </generated-code>

}
